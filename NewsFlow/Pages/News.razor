@page "/"
@inject HttpClient Http
@inject ToastService ToastService
@inject NavigationManager Navigation
@using System.Text.Json
@using System.Text.Json.Serialization

@inject Microsoft.Extensions.Configuration.IConfiguration Configuration

<div class="container mt-4">
    <h4 class="mb-4">ニュース検索</h4>

    <!-- 検索条件入力エリア -->
    <div class="card mb-4">
        <div class="card-body">
            <h6 class="card-title mb-3">検索条件</h6>

            <!-- キーワード入力 -->
            <div class="mb-3">
                <BootstrapInput @bind-Value="searchKeywords"
                               placeholder="例: AI 人工知能 技術"
                               DisplayText="キーワード（スペース区切りでAND検索）"
                               @onkeydown="HandleKeyPress" />
            </div>

            <!-- 期間指定 -->
            <div class="row mb-3">
                <div class="col-12 col-sm-6 mb-3 mb-sm-0">
                    <DateTimePicker @bind-Value="dateFrom"
                                   DateFormat="yyyy/MM/dd"
                                   MaxValue="DateTime.Today"
                                   ViewMode="DatePickerViewMode.Date"
                                   DisplayText="開始日" />
                </div>
                <div class="col-12 col-sm-6">
                    <DateTimePicker @bind-Value="dateTo"
                                   DateFormat="yyyy/MM/dd"
                                   MaxValue="DateTime.Today"
                                   ViewMode="DatePickerViewMode.Date"
                                   DisplayText="終了日" />
                </div>
            </div>

            <!-- 言語と並び替え -->
            <div class="row mb-3">
                <div class="col-12 col-sm-6 mb-3 mb-sm-0">
                    <Select @bind-Value="selectedLanguage"
                           DisplayText="言語"
                           Items="@languageOptions" />
                </div>
                <div class="col-12 col-sm-6">
                    <Select @bind-Value="selectedSortBy"
                           DisplayText="並び替え"
                           Items="@sortByOptions" />
                </div>
            </div>

            <!-- 検索ボタン -->
            <div class="d-flex gap-2">
                <Button Color="Color.Primary"
                       Icon="fa-solid fa-search"
                       OnClick="SearchNews"
                       IsDisabled="@isLoading">
                    @if (isLoading)
                    {
                        <span>検索中...</span>
                    }
                    else
                    {
                        <span>検索</span>
                    }
                </Button>
                <Button Color="Color.Secondary"
                       Icon="fa-solid fa-times"
                       OnClick="ClearSearch">
                    クリア
                </Button>
            </div>
        </div>
    </div>

    <!-- 検索結果表示エリア -->
    @if (searchResults != null)
    {
        <div class="card">
            <div class="card-body">
                <h6 class="card-title mb-3">
                    検索結果: @searchResults.TotalResults 件
                </h6>

                @if (searchResults.Articles == null || searchResults.Articles.Count == 0)
                {
                    <div class="alert alert-info" role="alert">
                        該当する記事が見つかりませんでした。
                    </div>
                }
                else
                {
                    <div class="d-flex flex-column gap-3">
                        @foreach (var article in searchResults.Articles)
                        {
                            <div class="card article-card" style="cursor: pointer; transition: all 0.2s;"
                                 @onclick="@(() => OpenArticle(article.Url))">
                                <div class="card-body p-3">
                                    <div class="d-flex gap-3">
                                        <!-- 画像エリア -->
                                        <div class="flex-shrink-0">
                                            @if (!string.IsNullOrEmpty(article.UrlToImage))
                                            {
                                                <img src="@article.UrlToImage"
                                                     alt="@article.Title"
                                                     style="width: 120px; height: 120px; object-fit: cover; border-radius: 4px;" />
                                            }
                                            else
                                            {
                                                <div style="width: 120px; height: 120px; background-color: #e0e0e0; display: flex; align-items: center; justify-content: center; border-radius: 4px;">
                                                    <i class="fa-solid fa-image fa-2x text-muted"></i>
                                                </div>
                                            }
                                        </div>

                                        <!-- テキストエリア -->
                                        <div class="flex-grow-1 d-flex flex-column" style="min-width: 0;">
                                            <!-- タイトル（1行） -->
                                            <h6 class="mb-1 text-truncate" style="font-weight: 600;">
                                                @article.Title
                                            </h6>

                                            <!-- 説明文（2行） -->
                                            <p class="text-muted mb-2 flex-grow-1" style="overflow: hidden; display: -webkit-box; -webkit-line-clamp: 2; -webkit-box-orient: vertical; line-height: 1.4; font-size: 0.875rem;">
                                                @(article.Description ?? "説明文がありません")
                                            </p>

                                            <!-- 情報源と日付（1行） -->
                                            <small class="text-muted text-truncate">
                                                @article.Source?.Name  |  @article.PublishedAt?.ToString("yyyy/MM/dd HH:mm")
                                            </small>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                }
            </div>
        </div>
    }
</div>

<style>
    .article-card:hover {
        background-color: #f8f9fa;
        box-shadow: 0 4px 8px rgba(0,0,0,0.15) !important;
    }
</style>

@code {
    // 検索条件
    private string searchKeywords = string.Empty;
    private DateTime? dateFrom = DateTime.Today.AddDays(-7);
    private DateTime? dateTo = DateTime.Today;
    private string selectedLanguage = "jp";
    private string selectedSortBy = "publishedAt";

    // 状態管理
    private bool isLoading = false;
    private NewsApiResponse? searchResults;

    private string ApiKey = string.Empty;
    private string NewsAPIUrl = string.Empty;

    // Select用のオプション
    private List<SelectedItem> languageOptions = new()
    {
        new SelectedItem("jp", "日本語"),
        new SelectedItem("en", "英語"),
        new SelectedItem("de", "ドイツ語"),
        new SelectedItem("es", "スペイン語"),
        new SelectedItem("fr", "フランス語"),
        new SelectedItem("it", "イタリア語"),
        new SelectedItem("zh", "中国語")
    };

    private List<SelectedItem> sortByOptions = new()
    {
        new SelectedItem("publishedAt", "公開日時"),
        new SelectedItem("relevancy", "関連度"),
        new SelectedItem("popularity", "人気度")
    };

    protected override void OnInitialized()
    {
        ApiKey = Configuration["ApiKeys:NewsAPIKey"] ?? "YOUR_NEWS_API_KEY";
        NewsAPIUrl = Configuration["NewsAPIUrl"] ?? "https://NewsAPI";
    }

    private async Task SearchNews()
    {
        if (string.IsNullOrWhiteSpace(searchKeywords))
        {
            await ToastService.Warning("キーワード入力", "キーワードを入力してください");
            return;
        }

        isLoading = true;

        try
        {
            // キーワードをスペースで分割してAND条件用に連結
            var keywords = string.Join(" AND ", searchKeywords.Split(' ', StringSplitOptions.RemoveEmptyEntries));

            // URLエンコード
            var encodedKeywords = Uri.EscapeDataString(keywords);
            var from = dateFrom?.ToString("yyyy-MM-dd") ?? string.Empty;
            var to = dateTo?.ToString("yyyy-MM-dd") ?? string.Empty;

            // NewsAPI エンドポイント構築
            var url = $"{NewsAPIUrl}?q={encodedKeywords}" +
                      $"&from={from}&to={to}" +
                      $"&language={selectedLanguage}" +
                      $"&sortBy={selectedSortBy}" +
                      $"&apiKey={ApiKey}";

            var response = await Http.GetFromJsonAsync<NewsApiResponse>(url);
            searchResults = response;

            if (searchResults?.Articles?.Count > 0)
            {
                await ToastService.Success("検索成功", $"{searchResults.TotalResults}件の記事が見つかりました");
            }
            else
            {
                await ToastService.Information("検索結果", "記事が見つかりませんでした");
            }
        }
        catch (HttpRequestException ex) when (ex.Message.Contains("426"))
        {
            await ToastService.Warning("制限事項", "⚠️ NewsAPIの無料プランはlocalhost専用です。本番環境では動作しません。詳細はREADMEをご確認ください。");
        }
        catch (Exception ex)
        {
            await ToastService.Error("エラー", $"エラーが発生しました: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task ClearSearch()
    {
        searchKeywords = string.Empty;
        dateFrom = DateTime.Today.AddDays(-7);
        dateTo = DateTime.Today;
        selectedLanguage = "jp";
        selectedSortBy = "publishedAt";
        searchResults = null;
        await ToastService.Information("クリア", "検索条件をクリアしました");
    }

    private void HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            _ = SearchNews();
        }
    }

    private void OpenArticle(string url)
    {
        Navigation.NavigateTo(url, true);
    }

    // NewsAPI レスポンスモデル
    public class NewsApiResponse
    {
        [JsonPropertyName("status")]
        public string Status { get; set; } = string.Empty;

        [JsonPropertyName("totalResults")]
        public int TotalResults { get; set; }

        [JsonPropertyName("articles")]
        public List<Article> Articles { get; set; } = new();
    }

    public class Article
    {
        [JsonPropertyName("source")]
        public Source? Source { get; set; }

        [JsonPropertyName("author")]
        public string? Author { get; set; }

        [JsonPropertyName("title")]
        public string Title { get; set; } = string.Empty;

        [JsonPropertyName("description")]
        public string? Description { get; set; }

        [JsonPropertyName("url")]
        public string Url { get; set; } = string.Empty;

        [JsonPropertyName("urlToImage")]
        public string? UrlToImage { get; set; }

        [JsonPropertyName("publishedAt")]
        public DateTime? PublishedAt { get; set; }

        [JsonPropertyName("content")]
        public string? Content { get; set; }
    }

    public class Source
    {
        [JsonPropertyName("id")]
        public string? Id { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; } = string.Empty;
    }
}
